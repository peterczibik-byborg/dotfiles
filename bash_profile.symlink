# ====================
# Get current branch in git repo
# ====================
function parse_git_branch() {
  BRANCH=`git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'`
  if [ ! "${BRANCH}" == "" ]
  then
    STAT=`parse_git_dirty`
    echo "[${BRANCH}${STAT}]"
  else
    echo ""
  fi
}

# ====================
# Get current status of git repo
# ====================
function parse_git_dirty() {
  status=`git status 2>&1 | tee`
  dirty=`echo -n "${status}" 2> /dev/null | grep "modified:" &> /dev/null; echo "$?"`
  untracked=`echo -n "${status}" 2> /dev/null | grep "Untracked files" &> /dev/null; echo "$?"`
  ahead=`echo -n "${status}" 2> /dev/null | grep "Your branch is ahead of" &> /dev/null; echo "$?"`
  newfile=`echo -n "${status}" 2> /dev/null | grep "new file:" &> /dev/null; echo "$?"`
  renamed=`echo -n "${status}" 2> /dev/null | grep "renamed:" &> /dev/null; echo "$?"`
  deleted=`echo -n "${status}" 2> /dev/null | grep "deleted:" &> /dev/null; echo "$?"`
  bits=''
  if [ "${renamed}" == "0" ]; then
    bits=">${bits}"
  fi
  if [ "${ahead}" == "0" ]; then
    bits="*${bits}"
  fi
  if [ "${newfile}" == "0" ]; then
    bits="+${bits}"
  fi
  if [ "${untracked}" == "0" ]; then
    bits="?${bits}"
  fi
  if [ "${deleted}" == "0" ]; then
    bits="x${bits}"
  fi
  if [ "${dirty}" == "0" ]; then
    bits="!${bits}"
  fi
  if [ ! "${bits}" == "" ]; then
    echo " ${bits}"
  else
    echo ""
  fi
}

# ====================
# Extract file with the specific program
# ====================
extract() {
  if [ -f "$1" ]; then
    case "$1" in
      *.tar.bz2)  tar -jxvf "$1"                        ;;
      *.tar.gz)   tar -zxvf "$1"                        ;;
      *.bz2)      bunzip2 "$1"                          ;;
      *.dmg)      hdiutil mount "$1"                    ;;
      *.gz)       gunzip "$1"                           ;;
      *.tar)      tar -xvf "$1"                         ;;
      *.tbz2)     tar -jxvf "$1"                        ;;
      *.tgz)      tar -zxvf "$1"                        ;;
      *.zip)      unzip "$1"                            ;;
      *.ZIP)      unzip "$1"                            ;;
      *.pax)      cat "$1" | pax -r                     ;;
      *.pax.Z)    uncompress "$1" --stdout | pax -r     ;;
      *.Z)        uncompress "$1"                       ;;
      *) echo "'$1' cannot be extracted/mounted via extract()" ;;
    esac
  else
     echo "'$1' is not a valid file to extract"
  fi
}

# ====================
# Prompt PS1
# ====================
export PS1="\[\e[36m\]\u\[\e[m\] in \[\e[36m\]\w\[\e[m\] on \[\e[33m\]\`parse_git_branch\`\[\e[m\]\\$\n "

# ====================
# General settings
# ====================
export EDITOR='vim'

[ -z "$TMUX" ] && export TERM=xterm-256color

export DOTFILES=$HOME/dotfiles

export PATH=/usr/local/bin:$PATH


# ====================
# Aliases
# ====================

# For configs
# -----------
alias csh="vim ~/.bash_profile"
alias cvim="vim ~/.vimrc"
alias ctmux="vim ~/.tmux.conf"

# General
# -------
alias l="ls -la"

# Tmux related
# ------------
alias tls="tmux ls"
alias ta="tmux attach"

# Copy public ssh key
# -------------------
alias cpssh="cat ~/.ssh/id_rsa.pub | pbcopy"

# Editors
# -------
alias subl="/Applications/Sublime\ Text\ 2.app/Contents/SharedSupport/bin/subl"
code () { VSCODE_CWD="$PWD" open -n -b "com.microsoft.VSCode" --args $* ;}

alias so='source'

# Tmux
# ----
alias tks='tmux kill-session'
alias tls='tmux ls'
alias ta='tmux attach'
source ~/.tmuxinator.bash

# Typo-protector
alias got='git'
alias vom='vim'

# ====================
# NVM
# ====================
export NVM_DIR=~/.nvm
source $NVM_DIR/nvm.sh

# ====================
# Boot2Docker config
# ====================
export DOCKER_HOST='tcp://192.168.59.103:2376'
export DOCKER_CERT_PATH='/Users/peteyy/.boot2docker/certs/boot2docker-vm'
export DOCKER_TLS_VERIFY=1

# ====================
# Base16 Shell
# ====================
export THEME="base16-tomorrow"
export BACKGROUND="dark"
BASE16_SHELL="$DOTFILES/base16-shell/$THEME.$BACKGROUND.sh"
source $BASE16_SHELL

bind "TAB:menu-complete"

