" Disable VI compatibility
set nocompatible

" Load plugins
source ~/.vim/plugins.vim

" Enable syntax highlighting
filetype on
filetype plugin indent on
syntax on

" Some kind of buffer tweak
set hidden

" Make longer history
set history=1000

" Better command completion
set wildmenu
set wildmode=list:longest

" Set title of the window
set title

" Better switching windows
set scrolloff=3

" Jump to marks easily
nnoremap ' `
nnoremap ` '

" Set default encoding to UTF-8
set encoding=utf-8

" Better copy & paste
set pastetoggle=<F2>
set clipboard=unnamed

" Mouse and backspace
set mouse=a  " on OSX press ALT and click
set backspace=indent,eol,start

" Turn highlight off
nmap <silent> <leader>n :silent :nohlsearch<CR>

" Shorter messages
set shortmess=a

" Rebind <Leader> key
let mapleader = ","

" Easier moving of code blocks
vnoremap < <gv
vnoremap > >gv

" Show trailing whitespace
autocmd ColorScheme * highlight ExtraWhitespace ctermbg=red guibg=red
au InsertLeave * match ExtraWhitespace /\s\+$/

" Highlight the column of the cursor
set cursorcolumn

" TODO MOVE TO GVIMRC
" Gui options
if has('gui_running')
  set guioptions-=L
  set guioptions-=r
  set guifont=Sauce\ Code\ Powerline:h18
end

" Show line numbers
set number
set relativenumber

" Coloumn for line wrapping
set colorcolumn=80
set wrap
set linebreak

" Unnessesary rendering
set lazyredraw

" Highlight matching pair
set showmatch

" Useful settings
set history=700
set undolevels=700

" Real programmers don't use TABs but spaces
set tabstop=2
set softtabstop=2
set shiftwidth=2
set expandtab

" Make search case insensitive
set hlsearch
set incsearch
set ignorecase
set smartcase

" Disable stupid backup and swap files
set nobackup
set nowritebackup
set noswapfile

" Easy split navigation
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" Set end of the line character
set list
set listchars=eol:¬

" HTML specific stuff
autocmd FileType html setlocal shiftwidth=1 tabstop=1

" Instead of an annoying sound display errors visually
set visualbell

" Typo protector lvl: 99999
if has("user_commands")
    command! -bang -nargs=? -complete=file E e<bang> <args>
    command! -bang -nargs=? -complete=file W w<bang> <args>
    command! -bang -nargs=? -complete=file Wq wq<bang> <args>
    command! -bang -nargs=? -complete=file WQ wq<bang> <args>
    command! -bang Wa wa<bang>
    command! -bang WA wa<bang>
    command! -bang Q q<bang>
    command! -bang QA qa<bang>
    command! -bang Qa qa<bang>
endif

" Use jk in insert mode to quickly switch to normal mode
inoremap jk <esc>

" Map ; to : in normal mode
nnoremap ; :

" Maximize window on open
set lines=99 columns=999

" Better navigation
nnoremap <silent> n nzz
nnoremap <silent> N Nzz
nnoremap <silent> * *zz
nnoremap <silent> # #zz
nnoremap <silent> g* g*zz
nnoremap <silent> g# g#zz

" Q for repeat macro
map Q @@

" Resize vim on window resize
au VimResized * exe "normal! \<c-w>="

" Jump to begining of the line and end
noremap H ^
noremap L $

" Colorscheme setttings
let base16colorspace=256
set t_Co=256
execute "colorscheme " . $THEME
execute "set background=" . $BACKGROUND

" ============================================================================
" Plugins Setup
" ============================================================================

" Required Vundle setup
filetype off

set rtp+=~/.vim/bundle/vundle/
call vundle#begin()

" Let Vundle manage itself
Plugin 'gmarik/vundle'

" Color schemes
Plugin 'chriskempson/base16-vim'

" Common plugins
Plugin 'scrooloose/syntastic'
Plugin 'ervandew/supertab'
Plugin 'kien/ctrlp.vim'
Plugin 'scrooloose/nerdtree'
Plugin 'scrooloose/nerdcommenter'
Plugin 'Raimondi/delimitMate'

" Markdown
Plugin 'plasticboy/vim-markdown'

" Javascript
Plugin 'pangloss/vim-javascript'
Plugin 'jelera/vim-javascript-syntax'

" Stylus - Jade
Plugin 'wavded/vim-stylus'
Plugin 'digitaltoad/vim-jade'

" JSX
Plugin 'mxw/vim-jsx'

" Almost unused
Plugin 'Lokaltog/vim-easymotion'
Plugin 'mattn/emmet-vim'
Plugin 'tpope/vim-surround'

call vundle#end()

filetype plugin indent on

" Settings for NERDTree
noremap <Leader>m :NERDTreeToggle<CR>

" Syntastic settings
let g:syntastic_javascript_checkers = ['jshint']
let g:syntastic_check_on_open=1
let g:syntastic_warning_symbol = '⚠'
let g:syntastic_error_symbol = '⚠'
let g:syntastic_style_error_symbol = '⚠'
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_loc_list_height = 5
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_wq = 0
highlight SyntasticErrorSign ctermfg=red ctermbg=237
highlight SyntasticWarningSign ctermfg=yellow ctermbg=237
highlight SyntasticStyleErrorSign ctermfg=red ctermbg=237
highlight SyntasticStyleWarningSign ctermfg=yellow ctermbg=237

" Use JSHintrc defined in the project
function s:find_jshintrc(dir)
    let l:found = globpath(a:dir, '.jshintrc')
    if filereadable(l:found)
        return l:found
    endif

    let l:parent = fnamemodify(a:dir, ':h')
    if l:parent != a:dir
        return s:find_jshintrc(l:parent)
    endif

    return "~/.jshintrc"
endfunction

function UpdateJsHintConf()
    let l:dir = expand('%:p:h')
    let l:jshintrc = s:find_jshintrc(l:dir)
    let g:syntastic_javascript_jshint_args = ("--config " . l:jshintrc)
endfunction

au BufEnter * call UpdateJsHintConf()

" Ctrl+P settings
let g:ctrlp_custom_ignore = 'node_modules\|DS_Store\|git'

" Strip trailing whitespaces
autocmd BufWritePre * :silent :%s/\s\+$//e
