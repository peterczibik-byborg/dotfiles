" VIMrc
" =====
set nocompatible " No VI compatibility
set autoread " Detect file changes outside vim

" Plug all the Plugins
" ====================
call plug#begin('~/.vim/bundle')

" Can't live without colors
 Plug 'chriskempson/base16-vim'
" Plug 'w0ng/vim-hybrid'
" Plug 'tomasr/molokai'
" Plug 'Lokaltog/vim-distinguished'
" Plug 'tpope/vim-vividchalk'
" Plug 'chriskempson/tomorrow-theme', {'rtp': 'vim'}
" Plug 'rainux/vim-desert-warm-256'
" Plug 'nanotech/jellybeans.vim'
" Plug 'junegunn/seoul256.vim'
" Plug 'vim-scripts/wombat256.vim'

" Shiny sword that breaks sometimes
" Plug 'Shougo/unite.vim'
" Plug 'Shougo/vimproc', { 'do': 'make' }

" Snippets
" Plug 'SirVer/ultisnips'

" Light line
Plug 'itchyny/lightline.vim' " Pretty status bar

Plug 'scrooloose/syntastic' " Static file checker
Plug 'majutsushi/tagbar' " Buffer line
Plug 'Raimondi/delimitMate' " Auto insert paired characters
Plug 'mileszs/ack.vim' " The silver searcher for VIM
Plug 'scrooloose/nerdcommenter' " Commenting lines or blocks
Plug 'junegunn/limelight.vim', { 'on': 'Limelight' } " Focusing tool
Plug 'junegunn/goyo.vim', { 'on': 'Limelight' } " Focusing tool
Plug 'airblade/vim-gitgutter' " Nice lines at the bottom
Plug '0x0dea/vim-molasses' " Punish myself for not being productive
Plug 'rizzatti/dash.vim' " Dash integration
Plug 'tpope/vim-fugitive' " Git interactions within VIM (blame and diff)
Plug 'tpope/vim-surround' " Surround
Plug 'tpope/vim-repeat' " Repeat last command with .
Plug 'tpope/vim-unimpaired' " Additional paired mappings
Plug 'tpope/vim-abolish' " Better abbrev
Plug 'ctrlpvim/ctrlp.vim' " Fast file opening
Plug 'mattn/emmet-vim', { 'for': 'html' } " Zen coding at it's best
Plug 'othree/html5.vim', { 'for': 'html' }
Plug 'pangloss/vim-javascript', { 'for': 'javascript' }
Plug 'jelera/vim-javascript-syntax', { 'for': 'javascript' }
Plug 'mxw/vim-jsx', { 'for': 'javascript' } " React specific
Plug 'leafgarland/typescript-vim', { 'for': 'typescript' } " Might come handy
Plug 'mustache/vim-mustache-handlebars'
Plug 'digitaltoad/vim-jade', { 'for': 'jade' }
Plug 'cakebaker/scss-syntax.vim', { 'for': 'scss' }
Plug 'wavded/vim-stylus', { 'for': 'stylus' }
Plug 'groenewege/vim-less', { 'for': 'less' }
Plug 'ap/vim-css-color', { 'for': 'css' }
Plug 'hail2u/vim-css3-syntax', { 'for': 'css' }
Plug 'tpope/vim-markdown', { 'for': 'markdown' }
Plug 'fatih/vim-go', { 'for': 'go' }
Plug 'rust-lang/rust.vim', { 'for': 'rust' }

call plug#end()

" General settings
" ================
let mapleader=","
set hidden " Some kind of buffer tweak
set history=1000
set undolevels=1000
set title " Set title of the window
set clipboard=unnamed " Use OS clipboard
set encoding=utf-8
set mouse=a
set backspace=indent,eol,start
set lazyredraw
set ttyfast
set showmatch " Highlight matching pair
set nobackup " Disable swapfiles
set nowritebackup
set noswapfile
set list " Display invisibles
set listchars=eol:¬
set visualbell " No noise just flash

" Syntax highlighting
" ===================
filetype on
filetype plugin on
filetype indent on
syntax enable
syntax on
set t_Co=256

" Command completion
" ==================
set wildmenu
set wildmode=list:longest
set wildignore+=build,cache,dist,*.min.*,coverage

" Autoscroll
" ==========
set scrolloff=10
set sidescrolloff=15
set sidescroll=1

" Status Line
" ===========
set laststatus=2

" Autocommands
" ============
" Resize vim on window resize
au VimResized * exe "normal! \<c-w>="
autocmd BufWritePre * :silent :%s/\s\+$//e " Strip trailing whitespaces

" Visual tweaks
" =============
set cursorcolumn " Highlight the coloumn of the cursor
set number " Display number on the sidebar
set relativenumber
set colorcolumn=80
set nowrap
set linebreak

" Folding
" =======
set foldmethod=indent
set foldnestmax=3
set nofoldenable

" Real programmers don't use TABs but spaces
" ==========================================
set tabstop=2
set softtabstop=2
set shiftwidth=2
set expandtab
set autoindent
set smartindent
set smarttab

" Search tweaks
" =============
set hlsearch
set incsearch
set ignorecase
set smartcase

" Mappings
" ========
" Hide search highlights
noremap <silent> <leader>n :nohlsearch<CR>
" Easier moving of code blocks
vnoremap < <gv
vnoremap > >gv
" Use jk in insert mode to quickly switch to normal mode
inoremap jk <esc>
" Better navigation
nnoremap <silent> n nzz
nnoremap <silent> N Nzz
nnoremap <silent> * *zz
nnoremap <silent> # #zz
nnoremap <silent> g* g*zz
nnoremap <silent> g# g#zz
" Q for repeat macro
map Q @@

" Typo protector lvl: 99999
" =========================
if has("user_commands")
    command! -bang -nargs=? -complete=file E e<bang> <args>
    command! -bang -nargs=? -complete=file W w<bang> <args>
    command! -bang -nargs=? -complete=file Wq wq<bang> <args>
    command! -bang -nargs=? -complete=file WQ wq<bang> <args>
    command! -bang Wa wa<bang>
    command! -bang WA wa<bang>
    command! -bang Q q<bang>
    command! -bang QA qa<bang>
    command! -bang Qa qa<bang>
endif

" Base16
" ======
let g:base16colorspace=256

" Colorscheme
" ===========
set background=dark
colorscheme base16-monokai

" Syntastic
" =========
let g:syntastic_javascript_checkers=['jshint']
let g:syntastic_warning_symbol='⚠'
let g:syntastic_error_symbol='⚠'
let g:syntastic_style_error_symbol='⚠'
let g:syntastic_always_populate_loc_list=1
let g:syntastic_loc_list_height=5
let g:syntastic_auto_loc_list=1
let g:syntastic_check_on_wq=0
highlight SyntasticErrorSign ctermfg=red ctermbg=237
highlight SyntasticWarningSign ctermfg=yellow ctermbg=237
highlight SyntasticStyleErrorSign ctermfg=red ctermbg=237
highlight SyntasticStyleWarningSign ctermfg=yellow ctermbg=237
nmap <leader>c :SyntasticCheck<CR>

" The silver searcher (ACK)
" =========================
nmap <leader>/ :Ack<space>
if executable('ag')
  let g:ackprg='ag --vimgrep'
endif

" Dash
" ====
nnoremap <leader>d :Dash<CR>
vnoremap <leader>d :Dash<CR>

" Limelight
" =========
let g:limelight_default_coefficient=0.7
nmap <leader>f :Limelight!!<cr>

" Fugitive
" ========
nnoremap <C-g>d :Gdiff<CR>
nnoremap <C-g>b :Gblame<CR>
nnoremap <C-g>s :Gstatus<CR>

" Gitgutter
" =========
let g:gitgutter_eager = 1

" JSX
" ===
let g:jsx_ext_required = 0 " Allow JSX in normal JS files

" Ctrl+P
" ======
let g:ctrlp_custom_ignore = 'node_modules'

